
////////////////////////////////////////////////////////////////////////////////
//
//  Author:         Ibrahim Sardar
//  Class:          CSCI 557
//  Filename:       llis.h
//  Date:           04/21/2018
//  Description:    Header for LLIS (low level image segmentation) class.
//
////////////////////////////////////////////////////////////////////////////////
//
//  Honor Pledge:
//
//  I pledge that I have neither given nor received any help on this project.
//
//  ibsardar
//
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2018 Copyright Holder All Rights Reserved.
//
////////////////////////////////////////////////////////////////////////////////

#ifndef _LLIS_H_
#define _LLIS_H_

#include "pnmio.h"
#include "matrix.h"

/**
*   @namespace llis
*   @see pnmio::Image @struct
*   @see Matrix @class
*
*   Contains multiple a multi-step, low level image segmentation procedure.
*   Note: utilizes pnmio's Image structure
*   Note: utilizes Matrix class
*/
namespace llis {

    /**
    *   * Helper structure *
    *   Stores a total of 8 features for some given component in an image
    *
    */
    struct Descriptor {
        int intensity = 0;                  // Intensity value of component
        int area = 0;                       // Zeroth moment of Area
        double centroid[2];                 // First moments of Area (center of mass)
        double central_moments[3];          // Second moments of Area (moment of inertia) (xx,xy,yy)
        double si_central_moments[3];       // Scale invariant second moments
        int perimeter = 0;                  // # of orthogonal zero-crossings
        double compactness = 0;             // P*P / 4*PI*A
        double elongation = 0;              // complicated stuff (related to compactness)
    };

    /**
    *   * Helper function *
    *   Converts a gray-scale image structure's data vector into a matrix
    *
    */
    Matrix img_to_mat(Image&);

    /**
    *   * Helper function *
    *   Converts a matrix into a gray-scale image structure
    *
    */
    Image mat_to_img(Matrix&, int, int);

    /**
    *   * Helper function *
    *   Writes a text file of component descriptor information
    *
    */
    void write_descriptors(std::vector<Descriptor>&, std::string, int);

    /**
    *   * Helper function *
    *   Guesses the index of a major valley in a given histogram
    *
    */
    int guess_valley(std::vector<double>&, int, int previous_threshold=0);

    /**
    *   * Helper function *
    *   Assists "simplify_equivs" function with recursion
    *
    */
    void scan_equivs(std::vector< std::vector<int> >&, std::vector<int>&, int, int);

    /**
    *   * Helper function *
    *   Simplifies an equivalence class list to a direct 1-1 mapping
    *
    */
    std::vector<int> simplify_equivs(std::vector< std::vector<int> >&);

    /**
    *   * Helper function *
    *   Calculates the number out of 4 neighbor elements with different values
    *
    */
    int neighbor_diffs(Matrix&, int, int, int, int);

    /**
    *   Generates connected component labels from a given gray-scale matrix
    *
    *   @param          Matrix &                binary image matrix (either 0 or 255)
    *   @param          int                     matrix width
    *   @param          int                     matrix height
    *   @return         Matrix                  labeled matrix
    */
    Matrix label_connected_components(Matrix&, int, int);

    /**
    *   Returns multiple images generated by the image segmentation process
    *
    *   @param          Image &                 gray-scale pnmio Image structure
    *   @param          string                  filename to save descriptor information
    *   @return         vector                  list of step result images (in order)
    */
    std::vector<Image> segment_image(Image&, std::string="component_descriptions.txt");

}

#endif   // !defined _LLIS_H_

